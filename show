#!/usr/bin/env bash

# Shared color definitions and utility functions for demo scripts
# Source this file in other scripts with: source "$(dirname "$0")/colors.sh"

# https://en.wikipedia.org/wiki/ANSI_escape_code#Colors
# FG Colors
_fg_black='\033[0;30m'
_fg_red='\033[0;31m'
_fg_green='\033[0;32m'
_fg_yellow='\033[0;33m'
_fg_blue='\033[0;34m'
_fg_magenta='\033[0;35m'
_fg_cyan='\033[0;36m'
_fg_white='\033[0;37m'
_fg_bright_black='\033[0;90m'
_fg_gray=$_fg_bright_black
_fg_bright_red='\033[0;91m'
_fg_bright_green='\033[0;92m'
_fg_bright_yellow='\033[0;93m'
_fg_bright_blue='\033[0;94m'
_fg_bright_magenta='\033[0;95m'
_fg_bright_cyan='\033[0;96m'
_fg_bright_white='\033[0;97m'

#BG Colors
_bg_black='\033[0;40m'
_bg_red='\033[0;41m'
_bg_green='\033[0;42m'
_bg_yellow='\033[0;43m'
_bg_blue='\033[0;44m'
_bg_magenta='\033[0;45m'
_bg_cyan='\033[0;46m'
_bg_white='\033[0;47m'
_bg_bright_black='\033[0;100m'
_bg_bright_red='\033[0;101m'
_bg_bright_green='\033[0;102m'
_bg_bright_yellow='\033[0;103m'
_bg_bright_blue='\033[0;104m'
_bg_bright_magenta='\033[0;105m'
_bg_bright_cyan='\033[0;106m'
_bg_bright_white='\033[0;107m'

# Text styles
_bold='\033[1m'
_dim='\033[2m'
_italic='\033[3m'
_underline='\033[4m'
_blink='\033[5m'
_reverse='\033[7m'

# No Color
NC='\033[0m'

# Semantic color definitions (configurable)
C_HEADER=${C_HEADER:-$_fg_cyan}
C_HEADER_TEXT=${C_HEADER_TEXT:-$_fg_white$_bold}
C_SUCCESS=${C_SUCCESS:-$_fg_green}
C_ERROR=${C_ERROR:-$_fg_red}
C_WARNING=${C_WARNING:-$_fg_yellow}
C_INFO=${C_INFO:-$_fg_blue}
C_DEBUG=${C_DEBUG:-$_fg_magenta}
C_COMMAND=${C_COMMAND:-$_fg_red}
C_COMMAND_TEXT=${C_COMMAND_TEXT:-$_fg_white}
C_DEBUG_TEXT=${C_DEBUG_TEXT:-$_fg_gray$_italic}
C_TEXT=${C_TEXT:-$_fg_yellow}
C_BULLET=${C_BULLET:-$_fg_green}
C_PROMPT=${C_PROMPT:-$_dim$_fg_cyan}
C_INTERACTIVE=${C_INTERACTIVE:-$_fg_magenta}
C_SEPARATOR=${C_SEPARATOR:-$_dim$_fg_cyan}

# Configurable symbols
S_BULLET=${S_BULLET:-"➤"}
S_SUCCESS=${S_SUCCESS:-"✓"}
S_INFO=${S_INFO:-"ℹ"}
S_WARNING=${S_WARNING:-"⚠"}
S_ERROR=${S_ERROR:-"✗"}
S_DEBUG=${S_DEBUG:-"$"}
S_COMMAND=${S_COMMAND:-"$"}

# Print debug info and exit with error
_debug_info() {
    echo "DEBUG: $DEBUG"
    echo "DRYRUN: $DRYRUN"
    echo "EXPORT_FORMAT: $EXPORT_FORMAT"
    echo "QUIET: $QUIET"
    exit 1
}

_check_env() {
    if [[ -n "$EXPORT_FORMAT" ]]; then
        # EXPORT_FORMAT must be 'sh' or 'md'
        if [[ "$EXPORT_FORMAT" != "sh" ]] && [[ "$EXPORT_FORMAT" != "md" ]]; then
            echo "ERROR: EXPORT_FORMAT must be 'sh' or 'md', got: '$EXPORT_FORMAT'"
            _debug_info
        fi

        # EXPORT_FORMAT can't be set with QUIET or DRYRUN
        # exit if set together
        #
        # EXPORT_FORMAT can't be set with EXPORT
        # exit if set together
        if [[ "$QUIET" = "true" ]] && [[ "$DRYRUN" = "true" ]]; then
            echo "ERROR: EXPORT_FORMAT can't be set with QUIET and DRYRUN"
            _debug_info
        fi
    fi
}

_check_env

_export_sh_intestation() {
    echo "#!/bin/bash"
    echo
    echo "# Generated by showtime"
    echo
}

_export_intestation() {
    [[ "$EXPORT_FORMAT" = "sh" ]] && \
        _export_sh_intestation
    [[ "$EXPORT_FORMAT" = "md" ]] && \
        : # do nothing
}

# Global history file for demo commands
_demo_histfile=$(mktemp)

_print_sigint_ctrl_c() {
    if [[ \
        "$EXPORT_FORMAT" = "sh" || \
        "$EXPORT_FORMAT" = "md" \
        ]]; then
        : # do nothing
    elif [[ "$QUIET" = "true" ]]; then
        : # do nothing
    else
        echo -e "\n${C_INTERACTIVE}Ctrl+C detected \
- press Ctrl+C again within 2 seconds to exit demo${NC}"
    fi
}

_print_entering_bash() {
    if [[ \
        "$EXPORT_FORMAT" = "sh" || \
        "$EXPORT_FORMAT" = "md" \
        ]]; then
        : # do nothing
    elif [[ "$QUIET" = "true" ]]; then
        : # do nothing
    else
        echo -e "${C_INTERACTIVE}Entering bash...${NC}\n"
    fi
}

_print_exiting_bash() {
    if [[ \
        "$EXPORT_FORMAT" = "sh" || \
        "$EXPORT_FORMAT" = "md" \
        ]]; then
        : # do nothing
    elif [[ "$QUIET" = "true" ]]; then
        : # do nothing
    else
        echo -e "${C_INTERACTIVE}Exiting bash...${NC}\n"
    fi
}

_print_press_enter_to_continue() {
    if [[ \
        "$EXPORT_FORMAT" = "sh" || \
        "$EXPORT_FORMAT" = "md" \
        ]]; then
        : # do nothing
    elif [[ "$QUIET" = "true" ]]; then
        : # do nothing
    else
        echo -e "${C_PROMPT}Press Enter to continue...${NC}"
    fi
}

_print_header() {
    if [[ "$QUIET" = "true" ]]; then
        : # do nothing
    elif [[ "$EXPORT_FORMAT" = "sh" ]]; then
        _export_sh_header "$@"
    elif [[ "$EXPORT_FORMAT" = "md" ]]; then
        _export_md_header "$@"
    else
        # the first argument is the header level and it's internal only
        shift
        echo -e "${C_HEADER}========================================${NC}"
        echo -e "${C_HEADER_TEXT}$*${NC}"
        echo -e "${C_HEADER}========================================${NC}\n"
    fi
}

_print_first_line() {
    [[ "$EXPORT_FORMAT" = "sh" ]] && \
        _export_sh_comment "$@" && return

    [[ "$EXPORT_FORMAT" = "md" ]] && \
        _export_md_comment "$@" && return

    [[ "$QUIET" = "true" ]] || \
        echo -e "${C_BULLET}${S_BULLET}${NC} ${C_TEXT}$*${NC}"
}


_print_line() {
    [[ "$EXPORT_FORMAT" = "sh" ]] && \
        _export_sh_comment "$@" && return

    [[ "$EXPORT_FORMAT" = "md" ]] && \
        _export_md_comment "$@" && return

    [[ "$QUIET" = "true" ]] || \
        echo -e "  ${C_TEXT}$*${NC}"
}

_print_newline() {
    [[ "$EXPORT_FORMAT" = "sh" || \
       "$EXPORT_FORMAT" = "md" || \
       "$QUIET" = "true" ]] && return
    echo
}

_clear() {
    [[ "$EXPORT_FORMAT" = "sh" || \
       "$EXPORT_FORMAT" = "md" || \
       "$QUIET" = "true" ]] && return
    clear
}

_print_success() {
    [[ "$EXPORT_FORMAT" = "sh" ]] && \
        _export_sh_comment "$@" && return
    [[ "$EXPORT_FORMAT" = "md" ]] && \
        _export_md_comment "$@" && return
    [[ "$QUIET" = "true" ]] || \
        echo -e "\n${C_SUCCESS}${S_SUCCESS} $*${NC}\n"
}

_print_error() {
    [[ "$EXPORT_FORMAT" = "sh" ]] && \
        _export_sh_comment "ERR: $*" && return
    [[ "$EXPORT_FORMAT" = "md" ]] && \
        _export_md_comment "ERR: $*" && return
    [[ "$QUIET" = "true" ]] || \
        echo -e "\n${C_ERROR}${S_ERROR} $*${NC}\n"
}

_print_warning() {
    [[ "$EXPORT_FORMAT" = "sh" ]] && \
        _export_sh_comment "WRN: $*" && return
    [[ "$EXPORT_FORMAT" = "md" ]] && \
        _export_md_comment "WRN: $*" && return
    [[ "$QUIET" = "true" ]] || \
        echo -e "\n${C_WARNING}${S_WARNING} $*${NC}\n"
}

_print_info() {
    [[ "$EXPORT_FORMAT" = "sh" ]] && \
        _export_sh_comment "INF: $*" && return
    [[ "$EXPORT_FORMAT" = "md" ]] && \
        _export_md_comment "INF: $*" && return
    [[ "$QUIET" = "true" ]] || \
        echo -e "${C_INFO}${S_INFO} $*${NC}"
}

_print_separator() {
    [[ "$EXPORT_FORMAT" = "sh" ]] && \
        _export_sh_comment "----------------------------------------" && return
    [[ "$EXPORT_FORMAT" = "md" ]] && \
        _export_md_comment "---" && return
    [[ "$QUIET" = "true" ]] || \
        echo -e "${C_SEPARATOR}----------------------------------------${NC}"
}

_print_debug_short_separator() {
    [[ "$DEBUG" = "true" ]] && \
        echo -e "${C_DEBUG}---${NC}"
}

_print_command() {
    # Print command with $ in front
    # if EXPORT is true, print the command as a comment
    # if QUIET is true, do not print the command
    # if DRYRUN is true, print the command
    # _print_command will understand the EXPORT, QUIET, and DRYRUN vars

    # Examples:
    # _print_command "echo 'This is a command'"
    # $ echo 'This is a command'
    # EXPORT=true _print_command "echo 'This is a command'"
    # # echo 'This is a command'
    # QUIET=true _print_command "echo 'This is a command'"
    # DRYRUN=true _print_command "echo 'This is a command'"
    # echo 'This is a command'

    [[ "$EXPORT_FORMAT" = "sh" ]] && \
        _export_sh_command "$@" && return
    [[ "$EXPORT_FORMAT" = "md" ]] && \
        _export_md_command "$@" && return
    [[ "$QUIET" = "true" ]] || \
        echo -e "${C_COMMAND}${S_COMMAND}${NC} ${C_COMMAND_TEXT}$*${NC}"
}

_print_debug() {
    [[ "$DEBUG" = "true" ]] && \
        echo -e "${C_DEBUG}${S_DEBUG}${NC} ${C_DEBUG_TEXT}$*${NC}"
}

# Signal handling for Ctrl+C
handle_sigint() {
    _print_sigint_ctrl_c

    # Temporarily change trap to exit on second Ctrl+C
    trap 'echo -e "\n${C_ERROR}Double Ctrl+C \
- exiting demo${NC}"; exit 130' SIGINT

    # Wait 2 seconds for second Ctrl+C, then enter interactive mode
    sleep 2
    trap 'handle_sigint' SIGINT
    _print_entering_bash
    b
    _print_press_enter_to_continue
}

# --- --- --- Export functions --- --- ---

# --- --- Export functions for markdown --- ---
_export_md_comment() {
    # Export input as a comment for markdown
    #
    # Example:
    # _export_md_comment "This is a comment"
    # # This is a comment
    echo "$*" | fold -s -w 78
}

_export_md_command() {
    # Export input as a command for markdown
    #
    # Example:
    # _export_md_command "echo 'This is a command'"
    # ```bash
    # echo 'This is a command'
    # ```
    echo "\`\`\`bash"
    echo "$*"
    echo "\`\`\`"
    echo
}

_export_md_header() {
    # Export input as a header for markdown
    #
    # Example:
    # _export_md_header "This is a header"
    range="$1"
    for ((i=0; i<range; i++)); do
        echo -n "#"
    done
    echo -n " "
    shift
    echo "$*"
    echo
}

# --- --- --- Export functions for shell --- --- ---
_export_sh_comment() {
    # Export input as a comment for shell
    #
    # Example:
    # _export_sh_comment "This is a comment"
    # # This is a comment
    echo "$*" | fold -s -w 78 | sed 's/^/# /'
}

_export_sh_command() {
    # Export input as a command for shell
    #
    # Example:
    # _export_sh_command "echo 'This is a command"
    # echo 'This is a command'
    echo "$*"
    echo
}

_export_sh_header() {
    # Export input as a header for shell
    #
    # Example:
    # _export_sh_header "This is a header"
    # # ========================================"
    # #  This is a header
    # # ========================================"
    shift
    echo "# ========================================"
    echo "#  $1"
    echo "# ========================================"
    echo
}

_export_sh_noop() {
    # Do nothing
    :  # do nothing
}

# Set up the trap
trap 'handle_sigint' SIGINT

# Function to print colored headers

h1() {
    if [[ "$QUIET" != "true" ]]; then
        _clear
        _print_header "1" "$@"
    fi
}

h2() {
    if [[ "$QUIET" != "true" ]]; then
        _print_header "2" "$@"
    fi
}

h3() {
    if [[ "$QUIET" != "true" ]]; then
        _print_header "3" "$@"
    fi
}

h4() {
    if [[ "$QUIET" != "true" ]]; then
        _print_header "4" "$@"
    fi
}

h5() {
    if [[ "$QUIET" != "true" ]]; then
        _print_header "5" "$@"
    fi
}

h6() {
    if [[ "$QUIET" != "true" ]]; then
        _print_header "6" "$@"
    fi
}


h() {
    h1 "$@"
}

hh() {
    h2 "$@"
}

hhh() {
    h3 "$@"
}

hhhh() {
    h4 "$@"
}

hhhhh() {
    h5 "$@"
}

hhhhhh() {
    h6 "$@"
}


# print a debug message
d() {
    _print_debug "$@"
}

# Function to print step messages
p() {
    local first_line=true
    echo "$1" | fold -s -w 78 | while IFS= read -r line; do
        if [[ "$first_line" = true ]]; then
            _print_first_line "$( echo "$line" | xargs )"
            first_line=false
        else
            _print_line "$line"
        fi
    done
    _print_newline
}

# Function to print success messages
ps() {
    _print_success "$@"
}

# Function to print error messages
pe() {
    _print_error "$@"
}

# Function to print warning messages
pw() {
    _print_warning "$@"
}

# Function to print info messages
pi() {
    _print_info "$@"
}

# Function to print section separators
p-() {
    _print_separator
}

# Function to print command in red and execute it
# put a newline at the end
e() {
    # Print command and run it
    # if EXPORT_FORMAT is sh or md, just print the command
    # if QUIET is true, do not print the command but still run it
    # if DRYRUN is true, print the command do not run it
    # _print_command will understand the EXPORT, QUIET, and DRYRUN vars
    _print_command "$1"
    if [[ \
        "$EXPORT_FORMAT" = "sh" || \
        "$EXPORT_FORMAT" = "md" || \
        "$DRYRUN" = "true" \
        ]]; then
        return
    fi

    # Append command to global history file
    echo "$1" >> "$_demo_histfile"

    if [[ "$QUIET" = "true" ]]; then
        # run command and redirect its output to /dev/null
        bash -c "$@" >/dev/null 2>&1
    else
        # Execute with _histfile set
        bash -c "$@"
    fi
    local exit_code=$?
    _print_newline
    return $exit_code
}

# Function to print command in red and execute it with timeout
et() {
    _print_command "$1"
    if [[ \
        "$EXPORT_FORMAT" = "sh" || \
        "$EXPORT_FORMAT" = "md" || \
        "$DRYRUN" = "true" \
        ]]; then
        return
    fi

    local timeout_duration="${2:-30}"  # Default 30 seconds

    # Append command to global history file
    echo "$1" >> "$_demo_histfile"

    if [[ "$QUIET" = "true" ]]; then
        # run command and redirect its output to /dev/null
        timeout "$timeout_duration" bash -c "$@" 2>&1 /dev/null
    else
        timeout "$timeout_duration" bash -c "$@"
    fi
    local exit_code=$?
    _print_newline
    if (( exit_code == 124 )); then
        pw "Command timed out after ${timeout_duration} seconds"
    fi
}

ed() {
    #_print_debug_short_separator
    _print_debug "$1"
    #_print_debug_short_separator
    if [[ "$DEBUG" = "true" ]]; then
        echo "$1" >> "$_demo_histfile"

        bash -c "$@"
        local exit_code=$?
        _print_newline
        return $exit_code
    fi
}
# Function to pause demo execution based on GOON variable
w() {
    local timeout="$1"

    if [[ "${GOON:-false}" = "true" ]]; then
        # If GOON is true, continue without pausing
        return
    elif [[ \
        "$EXPORT_FORMAT" = "sh" || \
        "$EXPORT_FORMAT" = "md" \
        ]]; then
        return # do nothing
    elif [[ "$QUIET" = "true" ]]; then
        : # do nothing
    else
        _print_press_enter_to_continue
    fi

    if [[ -n "$timeout" ]] 2>/dev/null; then
        # Wait with timeout - user can press Enter to continue early
        read -r -t "$timeout"
    else
        # Wait indefinitely for user input
        read -r
    fi
}

b() {
    if [[ \
        "$EXPORT_FORMAT" = "sh" || \
        "$EXPORT_FORMAT" = "md" || \
        "$DRYRUN" = "true" \
        ]]; then
        : # do nothing
    elif [[ "$QUIET" = "true" ]]; then
        : # do nothing
    elif [[ "$GOON" = "true" ]]; then
        : # do nothing
    else
        if [[ -z "$_demo_name" ]]; then
            _demo='demo'
        else
            _demo=$_demo_name
        fi
        HISTFILE="$_demo_histfile" \
            PS1="\[\[${C_INTERACTIVE}\]($_demo) \$ \[${NC}\]\]" \
            bash --rcfile <(
            echo "set +h"
            echo "trap 'history -w \"$_demo_histfile\"' EXIT"
            echo "# Load bash completion"
            echo "if [ -f /etc/bash_completion ]; then"
            echo "    . /etc/bash_completion"
            echo "elif [ -f /usr/share/bash-completion/bash_completion ]; then"
            echo "    . /usr/share/bash-completion/bash_completion"
            echo "fi"
        )
        _print_exiting_bash
    fi
}

# =========================================================================== #

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then

# Function to display usage
# Strip /bin if called directly
# TODO needs tests
EXEC_PATH="${0#/bin/}"

usage() {
    echo "Usage: $EXEC_PATH <demo_name> [--clean|-y]"
    echo "Examples:"
    echo "  $EXEC_PATH --help                # Show this help message"
    echo "  $EXEC_PATH mydemo                # Run demo mydemo"
    echo "  $EXEC_PATH --clean     mydemo    # Clean demo mydemo"
    echo "  $EXEC_PATH -y          mydemo    # Run demo mydemo without pausing"
    echo "  $EXEC_PATH --dryrun    mydemo    # Run everything without executing"
    echo "  $EXEC_PATH --export sh mydemo    # Export demo to stdout in shell script format"
    echo "  $EXEC_PATH --export md mydemo    # Export demo to stdout in markdown format"
    echo "  $EXEC_PATH --offline   mydemo    # Run demo mydemo offline steps (if defined)"
    echo "  $EXEC_PATH --quiet     mydemo    # Run without printing anything"
    exit 1
}

# Check if at least one argument is provided
if (( $# == 0 )); then
    usage
fi

# Initialize GOON variable
GOON=${GOON:-false}
OFFLINE=${OFFLINE:-false}
QUIET=${QUIET:-false}
EXPORT_FORMAT=${EXPORT_FORMAT:-}
DRYRUN=${DRYRUN:-false}
CLEAN=${CLEAN:-false}


if ! _valid_args=$(
    getopt -o cde:hqoy \
        --long clean,dryrun,export:,goon,help,offline,quiet -- "$@")
then
    echo "Error: Invalid arguments"
    usage
fi

eval set -- "$_valid_args"
while true; do
    case "$1" in
        -c|--clean)
            CLEAN=true
            shift
            ;;
        -d|--dryrun)
            DRYRUN=true
            shift
            ;;
        -e|--export)
            if [[ "$2" = "sh" ]]; then
                EXPORT_FORMAT="sh"
                shift 2
            elif [[ "$2" = "md" ]]; then
                EXPORT_FORMAT="md"
                shift 2
            else
                usage
            fi
            ;;
        -h|--help)
            usage
            ;;
        -o|--offline)
            OFFLINE=true
            shift
            ;;
        -q|--quiet)
            QUIET=true
            shift
            ;;
        -y|--goon)
            GOON=true
            shift
            ;;
        --)
            shift
            break
            ;;
    esac
done

if [[ "$CLEAN" = true ]] && [[ "$OFFLINE" = true ]]; then
    echo "ERR: CLEAN and OFFLINE can't be set together"
    exit 1
fi

# strips last /
# strip first ./
# strip first /
#
# ./show examples/minimal/
# ./show examples/minimal
# ./show /examples/minimal
# ./show ./examples/minimal
#
# will result in _demo_name=examples/minimal
#
# TODO needs tests!
_demo_dir=$1
if [[ -z "$_demo_dir" ]] || [[ "$_demo_dir" = "" ]]; then
    echo "Please provide a demo name"
    usage
fi

_demo_name=${_demo_dir%/}
_demo_name="${_demo_name#./}"
_demo_name="${_demo_name#/}"

# Validate demo number
# case $_demo_name in
#     ansible|autocompletion|auto-update|compose|healthcheck|quadlet|auto-update-rollback)
#         ;;
#     *)
#         echo "Error: Invalid demo name '$_demo_name'"
#         echo "Valid demos are: ansible, autocompletion, auto-update, auto-update-rollback compose, farm, healthckeck"
#         exit 1
#         ;;
# esac

# Check if demo directory exists
if [[ ! -d "$_demo_dir" ]]; then
    echo "Error: Demo directory '$_demo_dir' does not exist"
    exit 1
fi

# Load theme.sh from demo directory if it exists
if [[ -f "$_demo_dir/theme.sh" ]]; then
    # shellcheck source=/dev/null
    source "$_demo_dir/theme.sh" 2>/dev/null || true
fi

# Run all scripts in sequence
if [[ "$CLEAN" = true ]]; then
    # Clean mode
    CLEAN_SCRIPT="$_demo_dir/clean.sh"
    if [[ -f "$CLEAN_SCRIPT" ]]; then
        _export_intestation
        cd "$_demo_dir" || exit 1
        # shellcheck source=/dev/null
        source clean.sh
        exit 0
    else
        echo "WRN: Clean script '$CLEAN_SCRIPT' not found"
        exit 1
    fi
fi

if [[ "$OFFLINE" = true ]]; then
    OFFLINE_SCRIPT="$_demo_dir/offline.sh"
    if [[ -f "$OFFLINE_SCRIPT" ]]; then
        _export_intestation
        cd "$_demo_dir" || exit 1
        # shellcheck source=/dev/null
        source offline.sh
        exit 0
    else
        echo "WRN: Offline script '$OFFLINE_SCRIPT' not found"
        exit 1
    fi
fi

_demo_script="$_demo_dir/demo.sh"
if [[ -f "$_demo_script" ]]; then
    _export_intestation
    cd "$_demo_dir" || exit 1
    # shellcheck source=/dev/null
    GOON="$GOON" \
    EXPORT_FORMAT="$EXPORT_FORMAT" \
    _demo_name="$_demo_name" \
        source demo.sh
    exit 0
else
    echo "WRN: Demo script '$_demo_script' not found"
    exit 1
fi

fi # BASH_SOURCE

